\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename guile-web-driver-ng.info
@documentencoding UTF-8
@settitle Guile-Web-Driver-NG Reference Manual
@c %**end of header
@include version.texi

@copying
This manual documents Guile-Web-Driver-NG version @value{VERSION}.

Copyright (C) 2019-2024 Michal Herko
Copyright (C) 2024 Artyom V. Poptsov

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end copying

@dircategory The Algorithmic Language Scheme
@direntry
* Guile-Web-Driver-NG: (guile-web-driver-ng).  Guile Web Driver (Selenium) client.
@end direntry

@setchapternewpage odd

@titlepage
@sp 10

@title Guile-Web-Driver-NG Reference Manual
@subtitle For Guile-Web-Driver-NG @value{VERSION}

@author Artyom V. Poptsov

@page
@vskip 0pt plus 1filll
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@finalout
@headings double

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Guile-Web-Driver-NG Reference Manual

@insertcopying
@sp 1
@end ifnottex

@menu
* Introduction::
* Installation::
* API Reference::

Appendices

* GNU Free Documentation License::  The license of this manual.

Indices

* Type Index::
* Procedure Index::
* Concept Index::

@end menu

@contents

@c -----------------------------------------------------------------------------
@node Introduction
@chapter Introduction

Guile-Web-Driver-NG (NG stands for ``Next Generation'') is a web-driver (or
Selenium 2), client.  It's purpose is to automate browsers, specifically for
automatic web server testing.  Chrome or Firefox can be used as the automated
browsers, or it can connect to arbitrary server providing webdriver interface.
The client implements most of the @url{https://www.w3.org/TR/webdriver2/,
webdriver} specification.

This project was forked from @url{https://github.com/her01n/guile-web-driver,
guile-web-driver}.

@c -----------------------------------------------------------------------------
@node Installation
@chapter Installation

Guile-Web-Driver-NG sources are available from GitHub at
@url{https://github.com/artyom-poptsov/guile-web-driver-ng}.  This section
describes requirements of Guile-DSV and installation process.

Guile-Web-Driver-NG depends on the following packages:

@itemize
@item @url{https://www.gnu.org/software/guile/, GNU Guile}, 2.2 or later.
@item @url{https://github.com/aconchillo/guile-json, Guile-JSON}.
@item @url{https://www.gnutls.org/manual/gnutls-guile.html, Guile-GnuTLS}.
@item Chrome or Chromium browser + @code{chromedriver} or Mozilla Firefox + @code{geckodriver}.
@end itemize

@menu
* GNU Guix::
* Manual::
@end menu

@c -----------------------------------------------------------------------------
@node GNU Guix
@section GNU Guix

On @url{https://guix.gnu.org/, GNU Guix} the most recent version of the
package can be installed as follows:

@example
$ git clone https://github.com/artyom-poptsov/guile-web-driver-ng.git
$ cd guile-web-driver-ng
$ guix package -f guix.scm
@end example

@c -----------------------------------------------------------------------------
@node Manual
@section Manual
Given that the dependencies are present on a system, Guile-Web-Driver-NG can
be built and installed manually as follows:

@example
git clone https://github.com/artyom-poptsov/guile-web-driver-ng.git
cd guile-web-driver-ng
autoreconf -vif
./configure --prefix=/usr
make -j$(nproc)
sudo make install
@end example

@c -----------------------------------------------------------------------------
@node API Reference
@chapter API Reference

@menu
* Driver::
* Proxy::
@end menu

@c -----------------------------------------------------------------------------
@node Driver
@section Driver

@c -----------------------------------------------------------------------------
@node Sessions
@subsection Sessions
Following procedures open and close web driver sessions.  Most procedures
takes the web driver session as an optional argument.  Implicit session would
be open on first call of such a procedure, so for most use cases it is not
necessary to call @code{open-web-driver}, only to call @code{close-web-driver}
without argument when done.

@deffn {Scheme Procedure} open-web-driver @
       [#:browser='browser] @
       [#:url=url] [#:headless=#t] @
       [#:capabilities=capabilities]

Start a new web driver session.

@var{browser} argument should be a symbol, one of the following:

@itemize
@item @code{chrome}, @code{chromium} or @code{chromedriver}
Launch @command{chromedriver} command, open a chrome or chromium browser.  The command
should be in @code{PATH}.  This is the default.
@item @code{firefox} or @code{geckodriver}
Launch @command{geckodriver} command, open a Firefox browser instance.  The
command should be in @code{PATH}.
@item @code{headless-firefox}
Launch @command{geckodriver} command and open headless Firefox.  Deprecated,
use @code{#:browser firefox #:headless #t}.
@end itemize

If @var{url} argument is given, connect to a remote webdriver server at the
@var{url}, and start a new web driver session there.  @var{url} should start
with ``http://''.  @var{browser} must not be specified.

With @var{headless} option set to @code{#t}, opens the browser in headless
mode.  The page and user interface is not visible, but does not require a
window system.  This only works with @command{geckodriver}.

Desired @var{capabilities} may be requested.  The capabilities are submitted
in ``alwaysMatch'' property.  @var{capabilities} parameter should be an
association list or a hash-table.  To pass an object as a value, it must be
specified as a hash-table. For example:

@example lisp
(open-web-driver
  #:browser 'geckodriver
  #:capabilities
    `(("browserName" . "firefox")
      ("moz:firefoxOptions" . ,(alist->hash-table `(("args" . ("-headless")))))))
@end example

The caller may use @code{json} macro from @code{(json)} package to build the
hash tables conveniently.

The new driver would become the default driver in case there is no default
driver open yet.

@end deffn

@deffn {Scheme Procedure} web-driver? object
Checks if the @var{object} is an instance of a web driver, as returned by
@code{open-web-driver}.
@end deffn

@deffn {Scheme Procedure} close-web-driver [driver]
Closes the web @var{driver}.  If the argument is not specified, closes the
implicitly open web driver session.  Does nothing if the argument is not
specified and the session was not yet imlicitly started.
@end deffn

@deffn {Scheme Procedure} call-with-web-driver proc
Start a web driver session, and call @var{proc} procedure with the resulting
session object.  This new session would be used as default for procedures
taking optional session argument.  Closes the session after the proc returns
or throws an exception.  Returns the value that the @var{proc} returned.
@end deffn

@c -----------------------------------------------------------------------------
@node Timeouts
@subsection Timeouts

@deffn {Scheme Procedure} set-script-timeout [driver] [milliseconds|#:never]
Sets the timeout for a @var{driver} for executing scripts with methods
@code{execute-javascript} and @code{execute-javascript-async}.  Special value
@code{#:never} allows the script to run indefinitely.  Calling without
arguments sets the timeout to the default value, 30 seconds.
@end deffn

@deffn {Scheme Proceudre} get-script-timeout [driver]
Returns the current script timeout in milliseconds for a @var{driver}, or
@code{#:never}.
@end deffn

@deffn {Scheme Procedure} set-page-load-timeout [driver] [milliseconds]
Sets the timeout for page loading for a @var{driver}, for example with
@code{navigate-to} method.  Calling without arguments sets the timeout to the
default value, 5 minutes.
@end deffn

@deffn {Scheme Procedure} get-page-load-timeout [driver]
Returns the current page load timeout in milliseconds.
@end deffn

@deffn {Scheme Procedure} set-implicit-timeout [driver] [milliseconds]
Sets the timeout for element location, for example with @code{element-by-id}
method.  Calling without arguments sets the timeout to the default value, 0
milliseconds.
@end deffn

@deffn {Scheme Procedure} get-implicit-timeout [driver]
Returns the current implicit timeout in milliseconds.
@end deffn

@c -----------------------------------------------------------------------------
@node Navigation
@subsection Navigation

@deffn {Scheme Procedure} navigate-to [driver] url
Navigates the browser to given @var{url}.  Should be the same as user entering
the @var{url} in the address bar.  In Python bindings the analogous method is
called @code{get}.
@end deffn

@deffn {Scheme Procedure} current-url [driver]
Returns the current URL, as shown in the address bar.
@end deffn

@deffn {Scheme Procedure} back [driver]
Navigates to previous page.  Does nothing if the browser is already at the
start of history list.
@end deffn

@deffn {Scheme Procedure} forward [driver]
Navigates to next page in history list.  Does nothing if the browser is at the
most recent page.
@end deffn

@deffn {Scheme Procedure} refresh [driver]
Reloads current page.
@end deffn

@deffn {Scheme Procedure} title [driver]
Returns the title of the current page as string.  Returns an empty string if
the page did not set a title.
@end deffn

@c -----------------------------------------------------------------------------
@node Windows
@subsection Windows
@cindex Window

Let's define @emph{window} as a browser window, a tab or a similar concept,
capable of independent navigation.  In the specification, the window is also
called @emph{top-level browsing context}.  There is always one @emph{current}
window, that would receive navigation calls.  One window is created and made
current implicitly at the session opening.

@deffn {Scheme Procedure} current-window [driver]
Returns the current window.
@end deffn

@deffn {Scheme Procedure} close-window [driver]
Close the current window.  The driver may close this session and all
subsequent method calls would fail.
@c TODO: optionally accept window argument
@end deffn

@deffn {Scheme Procedure} all-windows [driver]
Returns the list of all windows of this session.
@end deffn

@deffn {Scheme Procedure} open-new-window [driver]
Open a new window.  Return the new window.  If the browser does not support
windows, open a new tab instead.
@end deffn

@deffn {Scheme Procedure} open-new-tab [driver]
Open a new browser tab.  Return the new window.  If the browser does not
support browser tabs, open a new window instead.
@end deffn

@deffn {Scheme Procedure} switch-to window
Makes the window current.
@end deffn

@c -----------------------------------------------------------------------------
@node Browsing Context
@subsection Browsing Context
@cindex Browsing Context

@emph{Browsing context} is either the window or a @code{<frame>},
@code{<iframe>} element.  There is always one @emph{current browsing context},
that recieves content calls, for example @code{element-by-...} methods.  The
current window is selected as current browsing context at session start, after
navigation step, switching to a different window or similar.

@deffn {Scheme Procedure} switch-to frame
Makes the frame the current browsing context.  @var{frame} must be a
@code{<frame>} or @code{<iframe>} element.  The frame must be a direct child
of the current browser context.
@c TODO: allow switching to any frame, not only to the direct child.
@end deffn

@deffn {Scheme Procedure} switch-to [driver] n
Makes the @var{n}-th child frame of the current browsing context the current
browsing context. *n* is a zero-based integer.
@end deffn

@deffn {Scheme Procedure} switch-to-parent [driver]
If the current browsing context is a frame, switch to it's parent frame, or to
the window if there is no parent frame.  Does nothing if the current browsing
context is a window.
@end deffn

@deffn {Scheme Procedure} switch-to-window [driver]
Makes the current window the current browsing context.
@end deffn

@c -----------------------------------------------------------------------------
@node Rectangle Record
@subsection Rectangle Record

@deftp {Record} <rect>
We define @code{<rect>} record type to be used for all screen geometry
methods.  It contains four fields: @code{x}, @code{y}, @code{width} and
@code{height}.  All values are integers.
@end deftp

@deffn {Scheme Procedure} make-rect x y width height
Returns new rectangle.
@end deffn

@deffn {Scheme Procedure} rect? object
Checks if an @var{object} is a @code{rect}.
@end deffn

@deffn {Scheme Procedure}  rect-x rect
@deffnx {Scheme Procedure} rect-y rect
@deffnx {Scheme Procedure} rect-width rect
@deffnx {Scheme Procedure} rect-height rect
Gets a @var{rect} field value.
@end deffn

@c -----------------------------------------------------------------------------
@node Resizing and Positioning Windows
@subsection Resizing and Positioning Windows

@deffn {Scheme Procedure} window-rect [driver]
Returns a screen position and dimension of the current window.
@end deffn

@deffn {Scheme Procedure} set-window-position [driver] x y
@deffnx {Scheme Procedure} set-window-size [driver] width height
@deffnx {Scheme Procedure} set-window-rect [driver] rect
Sets the screen position and/or dimension of the current window.  This
implicitly restores the window state to normal.  It may not be possible to
honor the new position exactly, in this case the window is moved and resized
to the nearest possible position and dimension.  Returns the new actual window
position and dimension.
@end deffn

@deffn {Scheme Procedure} minimize [driver]
Minimize (iconify) the current window.  Does nothing if this is not supported
by the window manager.
@end deffn

@deffn {Scheme Procedure} maximize [driver]
Maximize the current window.  If this is not supported by the window manager,
resize the window to the maximum possible size without going full screen.
@end deffn

@deffn {Scheme Procedure} full-screen [driver]
Makes the current window full screen.  If this is not supported by the window
manager, maximize the window.
@end deffn

@deffn {Scheme Procedure} restore [driver]
Restores the window to normal, not maximized, full screen or minimized.
@c TODO: all these methods may accept window as an argument
@end deffn

@c -----------------------------------------------------------------------------
@node Finding Elements
@subsection Finding Elements

@deffn {Scheme Procedure} element-by-css-selector [driver] selector [#:from element]
Finds the first element that matches css selector.  If there is no such
element, throws an exception.  If from element is specified, consider only
elements below this element.
@end deffn

@deffn {Scheme Procedure} elements-by-css-selector [driver] selector [#:from element]
Finds all the elements that matches CSS @var{selector}.  Returns empty list in
case there is no such element.  If @var{from} element is specified, consider
only elements below this element.
@end deffn

@deffn {Scheme Procedure} element-by-id [driver] id [#:from element]
Finds the first element with the given @var{id}.  If there is no such element,
throws an exception.  If @var{from} element is specified, consider only
elements below this element.
@end deffn

@deffn {Scheme Procedure} elements-by-id [driver] id [#:from element]
Finds all the element with the given @var{id}.  Returns empty list in case
there is no such element.  If @var{from} element is specified, consider only
elements below this element.
@end deffn

@deffn {Scheme Procedure} element-by-class-name [driver] class-name [#:from element]
Finds the first element of the class @var{class-name}.  If there is no such
element, throws an exception.  If @var{from} element is specified, consider
only elements below this element.
@end deffn

@deffn {Scheme Procedure} elements-by-class-name [driver] class-name [#:from element]
Finds all the element of the class @var{class-name}.  Returns empty list in
case there is no such element.  If @var{from} element is specified, consider
only elements below this element.
@end deffn

@deffn {Scheme Procedure} element-by-link-text [driver] link-text [#:from element]
Finds an @code{<a>} element that have the rendered text equal to
@var{link-text}.  If there is no such element, throws an exception.  If
@var{from} element is specified, consider only elements below this element.
@end deffn

@deffn {Scheme Procedure} elements-by-link-text [driver] link-text [#:from element]
Finds all @code{<a>} elements that have the rendered text equal to
@var{link-text}.  Returns empty list in case there is no such element.  If
@var{from} element is specified, consider only elements below this element.
@end deffn

@deffn {Scheme Procedure} element-by-partial-link-text [driver] link-text [#:from element]
Finds an @code{<a>} element where @var{link-text} is a substring of rendered
text.  If there is no such element, throws an exception.  If @var{from}
element is specified, consider only elements below this element.
@end deffn

@deffn {Scheme Procedure} elements-by-partial-link-text [driver] link-text [#:from element]
Finds all @code{<a>} elements where @var{link-text} is a substring of rendered
text.  Returns empty list in case there is no such element.  If @var{from}
element is specified, consider only elements below this element.
@end deffn

@deffn {Scheme Procedure} element-by-tag-name [driver] tag [#:from element]
Finds the first element with the @var{tag}.  If there is no such element,
throws an exception.  If @var{from} element is specified, consider only
elements below this element.
@end deffn

@deffn {Scheme Procedure} elements-by-tag-name [driver] tag [#:from element]
Finds all the elements with the @var{tag}.  Returns empty list in case there
is no such element.  If @var{from} element is specified, consider only
elements below this element.
@end deffn

@deffn {Scheme Procedure} element-by-xpath [driver] xpath [#:from element]
Finds the element matching the @var{xpath}.  If there is no such element,
throws an exception.  If @var{from} element is specified, consider only
elements below this element.
@end deffn

@deffn {Scheme Procedure} elements-by-xpath [driver] xpath [#:from element]
Finds all the the elements matching the @var{xpath}.  Returns empty list in
case there is no such element.  If @var{from} element is specified, consider
only elements below this element.
@end deffn

@deffn {Scheme Procedure} element-by-label-text [driver] text [#:from element]
Finds an @code{<input>} element, that has related @code{<label>} element with
the specified @var{text}.  If there is no such element, throws an exception.
If @var{from} element is specified, consider only elements below this element.
@end deffn

@deffn {Scheme Procedure} element-by-partial-label-text [driver] text [#:from element]
Finds an @code{<input>} element, that has related @code{<label>} element
containing @var{text}.  If there is no such element, throws an exception.  If
@var{from} element is specified, consider only elements below this element.
@end deffn

@deffn {Scheme Procedure} active-element [driver]
Returns the current active element.  Throws exception if there is no such
element.
@end deffn

@c -----------------------------------------------------------------------------
@node Element State
@subsection Element State

@deffn {Scheme Procedure} selected? element
Returns @code{#t} if the check box or radio box is checked, or if
@code{<select>} element is selected.  Throws an exception if the element is
not selectable.
@end deffn

@deffn {Scheme Procedure} attribute element name
Gets the value of the element's attribute.  Returns @code{#f} if the attribute
is undefined.
@end deffn

@deffn {Scheme Procedure} property element name
Gets the value of @var{element}'s JavaScript property.  Returns @code{#f} if
the property is undefined.
@end deffn

@deffn {Scheme Procedure} css-value element name
Returns the computed value from @var{element}'s style declarations.
@end deffn

@deffn  {Scheme Procedure} text element
@deffnx {Scheme Procedure} text [driver]
Gets the text content of the @var{element}.

Without an @var{element} argument, get the text of the whole page.
@end deffn

@deffn {Scheme Procedure} tag-name element
Returns the tag name of the @var{element}.
@end deffn

@deffn {Scheme Procedure} rect element
Returns position and dimension of the @var{element} relative to the document
element.
@c TODO: implement.
@end deffn

@deffn {Scheme Procedure} enabled? element
Checks if the form control is enabled.
@end deffn

@c -----------------------------------------------------------------------------
@node Element Interaction
@subsection Element Interaction

@deffn  {Scheme Procedure} click element
@deffnx {Scheme Procedure} click [driver] text
Simulates user clicking the @var{element}, For example @code{<a>} element or
form control.

If @var{text} is a string, find an element with the text and click it.  The
element may be:

@itemize
@item An @emph{anchor} with the given link text.

@example html
    <a href="https://link.org">text</a>
@end example

@item A @emph{button} with the given text content.

@example html
    <button>text</button>
@end example

@item An @emph{input} of type @code{button}, @code{submit} or @code{reset} with the
text @code{value}.

@example html
    <input type="button" value="text" />
@end example

@item Any /input/ that have an associated /label/ that contains the text.

@example html
    <input type="checkbox" name="alpha" id="alpha" />
    <label for="alpha">text</label>
@end example

@end itemize
@end deffn

@deffn {Scheme Procedure} clear element
Clears all content of content editable @var{element}.  Resets the state of
File Upload form control.
@end deffn

@deffn {Scheme Procedure} send-keys element text
Simulates user typing the @var{text} with the focus on the @var{element}.

The procedure could be used to choose a file for @code{input} of type
@code{file}.  @var{text} should be an absolute path to the selected file.  See
also @code{choose-file}.
@end deffn

@deffn {Scheme Procedure} send-keys [driver] label text
Find a label with the @var{text} content equal @var{label}.  Simulates use
typing the text into the associated input.
@end deffn

@deffn {Scheme Procedure} choose-file element path
Choose a file for @code{input} of type @code{file}.  @var{path} may be
relative or absolute, the file should exist.
@end deffn

@c -----------------------------------------------------------------------------
@node Document
@subsection Document

@deffn {Scheme Procedure} page-source [driver]
Gets the HTML source of the current browser context (window or frame).
@end deffn

@deffn {Scheme Procedure} execute-javascript [driver] body [arguments ...]
Execute JavaScript in the current browsing context.

@var{body} is a string, it may be a single statement or multiple statements
separated by ``;''.  If a statement returns a value with @code{return}, this
value is returned by this method.  Element objects are returned as
interchangeable with objects returned by @code{element-by-...} methods.  Other
JavaScript objects are returned as @code{hash-table} instances.  Otherwise
return @code{#nil}.  Arguments are passed as a function arguments.  They can
be accessed through @var{arguments} Array-like variable.  This allows passing
elements returned by @code{element-by-...*} methods to JavaScript.  It may be
practical to pass strings this way to avoid escaping issues.

Examples:

@example lisp
(execute-javascript "return 3 + 4") => 7
(execute-javascript "return arguments[0] * 2;" 2) => 4
(execute-javasctipt "arguments[0].innerHTML = 'text'; return 1;" (element-by-id "id"))
(text (execute-javascript "return document.getElementById('id');")) => "text"
@end example

@end deffn

@deffn {Scheme Procedure} execute-javascript-async [driver] body [arguments ...]
Executes JavaScript and waits for the callback.  Callback function is appended
to the @var{arguments} variable.  This method returns when this function is
called. The first argument of the function call is the return value. This
method is still subject to configured timeout.

Example:

@example lisp
(execute-javascript-async
  "callback = arguments[0];
   window.setTimeout(function() @{ callback(42); @}, 1);") => 42
@end example

@end deffn

@c -----------------------------------------------------------------------------
@node Cookies
@subsection Cookies

@deffn {Scheme Procedure} cookie-name cookie
The name of the @var{cookie}.
@end deffn

@deffn {Scheme Procedure} cookie-value cookie
The @var{cookie} value.
@end deffn

@deffn {Scheme Procedure} cookie-path cookie
The @var{cookie} path.  For example ``/''.

Attribute ``Path''.
@end deffn

@deffn {Scheme Procedure} cookie-domain cookie
The domain the @var{cookie} is visible to.

Attribute ``Domain''.
@end deffn

@deffn {Scheme Procedure} cookie-secure cookie
Whether the @var{cookie} is a secure cookie.

Attribute ``Secure''.
@end deffn

@deffn {Scheme Procedure} cookie-http-only cookie
Whether the @var{cookie} is an HTTP only cookie.

Attribute ``HttpOnly''.
@end deffn

@deffn {Scheme Procedure} cookie-expiry cookie
When the @var{cookie} expires, specified in seconds since Unix Epoch.
Calculated from the value of attribute ``Max-Age''.  May be @code{#f} for a
session cookie.
@end deffn

@deffn {Scheme Procedure} cookie-same-site cookie
Same Site policy value.  May be ``Lax'', ``Strict'', or @code{#f}.
@end deffn

@deffn {Scheme Procedure} get-all-cookies [driver]
List of cookies associated with the current browsing context (domain and
path).
@end deffn

@deffn {Scheme Procedure} get-named-cookie [driver] name
Get the cookie with the given @var{name}, associated with the current browsing
context.  Throws an exception if there is no such cookie.
@end deffn

@deffn {Scheme Procedure} add-cookie [driver] #:name name #:value value [#:path path] [#:domain
  domain] [#:secure secure] [#:http-only http-only] [#:expiry expiry]
  [#:same-site same-site]

Add a cookie.  The @var{path} defaults to ``/''.  The @var{domain} defaults to
current browser domain.  The @var{expiry} defaults to a session cookie.
@end deffn

@deffn {Scheme Procedure} delete-named-cookie [driver] name
Delete the named cookie with a @var{name}, associated with the current
browsing context.  If the cookie does not exist, does nothing.
@end deffn

@deffn {Scheme Procedure} delete-all-cookies [driver]
Deletes all cookies associated with the current browsing context.
@end deffn

@c -----------------------------------------------------------------------------
@node Actions
@subsection Actions
@cindex Action

This is a low level interface to generate fine grained input events.  See
``Element Interaction'' for higher level interface.

@deffn {Scheme Procedure} key-down key
Simulates user pressing a @var{key} on a keyboard.  Key repetition does not
apply, only one @code{keydown} event would be fired, even if the key stays
pressed for long time.  @var{key} is a string representing the key, it may be:

@itemize
@item Control character associated with the key.

For example ``\uE003'', ``\uE009''.

@item Single unicode character that results from pressing the key on US
    keyboard layout.

For example ``a'', `` ``,''[``.

@item @url{https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values, KeyboardEvent.code} value.

For example: ``KeyA'', ``Digit0'', ``Keypad0'', ``ControlLeft'',
``Space'', ``F4'', ``ArrowDown''.

Code is case insensitive, for example ``f4'' is accepted.

@end itemize
@end deffn

@deffn {Scheme Procedure} key-up key
Simulates user releasing a @var{key} on a keyboard.  The @var{key} must match
key previously pressed with @code{key-down}, if not the action is silently
ignored.
@end deffn

@deffn {Scheme Procedure} mouse-move x y [duration]
Simulate user moving mouse pointer to a location.  @var{x}, @var{y} are
coordinates relative to the current viewport.  Simulate the cursor movement
for the given @var{duration} in milliseconds if given.  Multiple intermediate
events may be fired in this case.
@end deffn

@deffn {Scheme Procedure} mouse-down button
Simulates user pressing a mouse @var{button}.  @var{button} is either integer
index of the button (0 for the left button), or symbol @code{#:left},
@code{#:middle}, @code{#:right}.
@end deffn

@deffn {Scheme Procedure} mouse-up button
Simulates user releasing a mouse @var{button}.  @var{button} should match
button previously pressed with @code{mouse-down}, otherwise the action is
silently ignored.
@end deffn

@deffn {Scheme Procedure} wait time
@strong{Warning}: Because of a bug, this does not work correctly with
@command{chromedriver}.

Wait before performing following actions. @var{time} is given in milliseconds.

@example lisp
(perform (key-down "KeyA") (wait 20) (key-up "KeyA")))
@end example

is roughly equivalent to

@example lisp
(perform (key-down "KeyA"))
(usleep (* 20 1000))
(perform (key-up "KeyA"))
@end example

but potentially much more precise.

@strong{Note}: In specification, this action is called ``pause''.  We use
@code{wait} because @code{pause} is a core binding in Guile.
@end deffn

@deffn {Scheme Procedure} release-all
Simulates user releasing all currently pressed keys and buttons.
@end deffn

@deffn {Scheme Procedure} perform [driver] action ...
Perform the given actions.  Returns when all the corresponding events were
dispatched.

Examples:

@example lisp
(perform
  (key-down "ShiftRight") (wait 10) (key-down "a") (wait 10) (key-up "a") (wait 10)
  (key-up "ShiftRight")
(perform
  (mouse-move 1 1) (key-down "ControlLeft") (mouse-down #:left)
  (mouse-move 100 100 1000) (release-all))
@end example
@end deffn

@c -----------------------------------------------------------------------------
@node Proxy
@section Proxy

A proxy is a pass-through service that forwards traffic between a client and a
service on behalf of a client.  The main purpose of the proxy in
Guile-Web-Driver-NG is to intercept, inspect and modify traffic.

@menu
* Proxy Class::
* Connection::
* Interceptor::
* Interceptor Chain::
@end menu

@c -----------------------------------------------------------------------------
@node Proxy Class
@subsection Proxy Class

@deftp {Class} <proxy> @
       [#:address=INADDR_LOOPBACK] @
       [#:port=8080] @
       [#:backlog=1] @
       [#:interceptor=#f]

The main class that describes a proxy.

Constructor parameters:
@table @asis
@item #:address
An IP address to bind the proxy to.
@item #:port
A TCP port to bind proxy to.
@item #:backlog
Proxy backlog length.
@item #:interceptor
Proxy interceptor to handle the traffic.
@end table

@end deftp

@deffn {Scheme Procedure} proxy? x
Check if @code{x} is a @code{<proxy>} instance.
@end deffn

@deffn {Scheme Procedure} proxy-connect! @
       (proxy <proxy>) @
       (client <pair>) @
       (host <string>) @
       (tcp-port <number>)

Connect @var{proxy} to a target @var{host} and @var{port} which was requested
by a @var{client}.  Return a new @code{<proxy-connection>} instance.

@end deffn

@deffn {Scheme Procedure} proxy-connection @
       (proxy <proxy>) @
       (host <string>) @
       (port <number>)

Get a @code{<proxy-connection>} instance referenced by @var{host} and
@var{port} for a @var{proxy}.

@end deffn

@deffn {Scheme Procedure} proxy-disconnect! @
       (proxy <proxy>) @
       (host <string>) @
       (port <number>)

Disconnect a @var{proxy} from a @var{host} and a @var{port}.  Return value is
undefined.

@end deffn

@deffn {Scheme Procedure} proxy-create-socket (proxy <proxy>)
Create a TCP/IP socket for a @var{proxy} to listen to.
@end deffn

@deffn {Scheme Procedure} proxy-listen! (proxy <proxy>)
Listen to incoming connections for a @var{proxy}.  Return value is undefined.
@end deffn

@deffn {Scheme Procedure} proxy-intercept @
       (proxy <proxy>)
       (connection <proxy-connection>)

Intercept the traffic coming through a @var{proxy}, replace HTTP headers on
the way.

@end deffn

@deffn {Scheme Procedure} transfer-data @
       (proxy <proxy>) @
       (connection <proxy-connection>)

Transfer data through a @var{proxy}.

@end deffn

@deffn {Scheme Procedure} proxy-start! (proxy <proxy>)
Start a @var{proxy}.  If the @var{proxy} is already started the procedure
throws an error.
@end deffn

@deffn {Scheme Procedure} proxy-stop! (proxy <proxy>)
Stop a @var{proxy}.
@end deffn

@deffn {Scheme Procedure} make-key (host <string>) (port <number>)
Internal procedure to make a key for a proxy connections hash table.
@end deffn

@c -----------------------------------------------------------------------------
@node Connection
@subsection Connection

@deftp {Class} <proxy-connection> @
       [#:host=#f] @
       [#:port=#f] @
       [#:client=#f] @
       [#:target-port=#f] @
       [#:tls-session=#f]

@table @asis
@item #:host
Target host name.
@item #:port
Target TCP port number.
@item #:client
TCP/IP client that uses this connection.
@item #:target-port
A Scheme port for communication with the target host.
@item #:tls-session
TLS session for transferring the data.
@end table

@end deftp

@deffn {Scheme Procedure} proxy-connection? x
Check if @var{x} is a @code{<proxy-connection>} instance.
@end deffn

@deffn {Scheme Procedure} proxy-connection-client-port @
       (connection <proxy-connection>)
Get the client socket for a proxy @var{connection}.
@end deffn

@deffn {Scheme Procedure} proxy-connection-close! @
       (connection <proxy-connection>)
Close a @var{connection}.
@end deffn

@c -----------------------------------------------------------------------------
@node Interceptor
@subsection Interceptor

The @code{(web proxy interceptor)} module provides an intercepting (MITM)
proxy facilities that allow to intercept, inspect and modify the traffic that
goes through the proxy.

@deftp {Class} <proxy-interceptor> @
       [#:chain='()] @
       [#:tls-session-priorities="NORMAL:+ARCFOUR-128:+CTYPE-X509"] @
       [#:x509-certificate-file=%default-x509-certificate-file] @
       [#:x509-private-key-file=%default-x509-private-key-file]

@table @asis
@item #:chain
An intercepting proxy chain of actions that must be applied upon the traffic
(@pxref{Interceptor Chain}.)
@item #:tls-session-priorities
TLS session priorities as described in GnuTLS documentation as a string.
@item #:x509-certificate-file
The path to a X509 certificate file.
@item #:x509-private-key-file
The path to a X509 private key file.
@end table

@end deftp

@deffn {Scheme Procedure} proxy-interceptor-chain @
       (interceptor <proxy-interceptor>)
Get the proxy @var{interceptor} chain.
@end deffn

@deffn {Scheme Procedure} proxy-interceptor-tls-session-priorities @
       (interceptor <proxy-interceptor>)
Get the proxy @var{interceptor} TLS session priorities string.
@end deffn

@deffn {Scheme Procedure} proxy-interceptor-x509-certificate-file @
       (interceptor <proxy-interceptor>)
Get the proxy @var{interceptor} x509 certificate file path as a string.
@end deffn

@deffn {Scheme Procedure} proxy-interceptor-x509-private-key-file @
       (interceptor <proxy-interceptor>)
Get the proxy @var{interceptor} x509 private key file path as a string.
@end deffn

@deffn {Scheme Procedure} proxy-interceptor-run @
       (interceptor <proxy-interceptor>) @
       (connection <proxy-connection>)

Run the proxy @var{interceptor} upon a @var{connection}.

@end deffn

@c @deffn {Scheme Procedure} 

@c @end deffn


@c -----------------------------------------------------------------------------
@node Interceptor Chain
@subsection Interceptor Chain
@cindex Proxy Interceptor Chain

@code{(web proxy interceptor chain)} contains the definition of proxy
interceptor chain that allows to run actions upon the incoming traffic.

A proxy chain is four-column table which is represented by a Scheme list.
Each table row has the following format:
@example lisp
'(<chain> <field> <action> <parameters>)
@end example

There are currently two possible chains:
@itemize
@item request
@item response
@end itemize

Possible request/response fields to handle:
@itemize
@item method
@item uri
@item version
@item headers
@item meta
@item body
@end itemize

Possible actions:
@itemize
@item 'dump
Dump the content of a field to @code{stdout} or @code{stderr}.

Parameters: one of the following symbols:
@itemize
@item @code{stdout} -- Dump data to the standard output stream.
@item @code{stderr} -- Dump data to the standard error stream.
@end itemize

@item 'set
Replace the value of the field with the specified one.

Parameters: the field value to be set.
@item 'replace
Replace the content of the field with the specified values.  This action only
can be applied to the fields which values are associative lists.

For example, if we have the following request headers:
@example lisp
'((User-Agent . "Firefox")
  (Host       . "example.com))
@end example

we can replace the @code{User-Agent} field using the following proxy
interceptor chain:
@example lisp
'((request headers replace ((User-Agent . "Chromium"))))
@end example

@item 'append
Append new elements at the end of the specified field.  This action only can
be applied to the fields which values are associative lists.

For example, if we have the following request headers:
@example lisp
'((User-Agent . "Firefox")
  (Host       . "example.com))
@end example

we can append the @code{Accept} field using the following proxy
interceptor chain:
@example lisp
'((request headers replace ((Accept . "*/*"))))
@end example

@item 'delete
Delete elements from the the specified field that match the element in the
list specified as @code{<parameters>} value.  This action only can be applied
to the fields which values are associative lists.

For example, if we have the following request headers:
@example lisp
'((User-Agent . "Firefox")
  (Host       . "example.com)
  (Accept     . "*/*"))
@end example

we can delete @code{User-Agent} and @code{Accept} fields using the following
proxy interceptor chain:
@example lisp
'((request headers delete (User-Agent Accept)))
@end example

@item <procedure>
Apply a custom procedure to the field value.

The procedure is called as follows:
@example lisp
(proc <interceptor-chain-rule> <previous-field-value>)
@end example

@end itemize

Example of a simple interceptor chain:
@example lisp
'((request headers dump stderr))
@end example

More complicated example:
@example lisp
'((request headers dump stderr)
  (request headers set
           ((host "example.com" . #f)
            (user-agent . "curl/8.5.0")
            (accept (*/*)))))
@end example

This chain dumps the request headers to @code{stderr} stream first and then
replaces the headers with the provided ones.

@deffn  {Scheme Procedure} rule:type (rule <list>)
@deffnx {Scheme Procedure} rule:field (rule <list>)
@deffnx {Scheme Procedure} rule:action (rule <list>)
@deffnx {Scheme Procedure} rule:parameters (rule <list>)
Interceptor chain @var{rule} field accessors.
@end deffn

@deffn {Scheme Procedure} chain-select (chain <list>) (type <symbol>)
Select rules of a @var{type} from a @var{chain}.

Possible types are: @code{request}, @code{response}.
@end deffn

@deffn {Scheme Procedure} chain-run (chain <list>) (field <symbol>) object
Run a @var{chain} on a @var{field} with a value @var{object}.
@end deffn

@c -----------------------------------------------------------------------------
@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@include indices.texi

@bye
